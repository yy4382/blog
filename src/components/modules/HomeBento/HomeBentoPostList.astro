---
import TimeTooltip from "@comp/elements/TimeTooltip.vue";
import { getPostPath } from "@utils/path";
import { type CollectionEntry } from "astro:content";
import { Icon } from "astro-icon/components";
import Card from "@comp/ui/Card/Card.astro";
import { DateTime } from "luxon";
interface Props {
  posts: CollectionEntry<"post">[];
  title: string;
  class?: string;
  link?: string;
  showUpdateTime?: boolean;
}
const { posts, title, class: className, link, showUpdateTime } = Astro.props;

export const relativeTimeFromNow = (
  time: Date | string,
  current = new Date(),
) => {
  if (!time) {
    return "";
  }
  time = new Date(time);
  const msPerMinute = 60 * 1000;
  const msPerHour = msPerMinute * 60;
  const msPerDay = msPerHour * 24;
  const msPerMonth = msPerDay * 30;
  const msPerYear = msPerDay * 365;

  const elapsed = +current - +time;

  if (elapsed < msPerMinute) {
    const gap = Math.ceil(elapsed / 1000);
    return gap <= 0 ? "刚刚" : `${gap} 秒前`;
  } else if (elapsed < msPerHour) {
    return `${Math.round(elapsed / msPerMinute)} 分钟前`;
  } else if (elapsed < msPerDay) {
    return `${Math.round(elapsed / msPerHour)} 小时前`;
  } else if (elapsed < msPerMonth) {
    return `${Math.round(elapsed / msPerDay)} 天前`;
  } else if (elapsed < msPerYear) {
    return `${Math.round(elapsed / msPerMonth)} 个月前`;
  } else {
    return `${Math.round(elapsed / msPerYear)} 年前`;
  }
};

import { popover } from "@styles/tv";
import { tv } from "tailwind-variants";
const postListPopover = tv({
  extend: popover,
  slots: {
    base: "bottom-2 right-2 hover:w-20",
    contentWrapper: "h-8 group-hover:w-20",
    content: "mr-5 flex h-full flex-grow text-center text-content center",
  },
});
const { base, contentWrapper, content, icon } = postListPopover();
---

<Card
  class:list={["relative flex flex-col gap-4", className, link && "pb-12"]}
  useHeading
  lessBottomPadding
  padding="sm"
  leftExtraPadding
>
  <h2 slot="heading">{title}</h2>
  <ul class="timeline ml-3 flex-grow text-content sm:ml-4">
    {
      posts.map((post) => {
        return (
          <li class="flex min-w-0 justify-between">
            <a
              href={getPostPath(post)}
              class="underlined-link min-w-0 shrink truncate"
              title={post.data.title}
            >
              {post.data.title}
            </a>
            <span class="ml-2 shrink-0 self-end text-xs opacity-70">
              <TimeTooltip
                postTime={DateTime.fromJSDate(post.data.date).toFormat(
                  "yyyy-MM-dd",
                )}
                updatedTime={DateTime.fromJSDate(post.data.updated).toFormat(
                  "yyyy-MM-dd",
                )}
                client:load
              >
                {relativeTimeFromNow(
                  showUpdateTime ? post.data.updated : post.data.date,
                )}
              </TimeTooltip>
            </span>
          </li>
        );
      })
    }
  </ul>
  {
    link && (
      <div class={base()}>
        <div class={contentWrapper()}>
          <a class={content()} href={link}>
            更多
          </a>
        </div>
        <Icon name="mingcute:more-3-line" class={icon()} size={24} />
      </div>
    )
  }
</Card>
