---
import Card from "@comp/ui/Card/Card.astro";

type Props = {
  keyword?: string;
  animated?: boolean;
};
const { keyword, animated = true } = Astro.props;

const hasKeyword = keyword !== undefined && keyword !== "";

export function groupingEntries<T>(posts: T[], getYear: (arg0: T) => number) {
  const groupedPosts = posts.reduce((grouped: Record<string, T[]>, post: T) => {
    const year = getYear(post);
    if (!grouped[year]) {
      grouped[year] = [];
    }
    grouped[year].push(post);
    return grouped;
  }, {});

  // convert the object to an array
  const groupedPostsArray = Object.keys(groupedPosts).map((key) => ({
    year: key,
    posts: groupedPosts[key],
  }));

  // sort years by latest first
  groupedPostsArray.sort((a, b) => parseInt(b.year) - parseInt(a.year));
  return groupedPostsArray;
}

export const interval = 100;
---

<Card
  headSize="3xl"
  useHeading={hasKeyword}
  class:list={[animated && "main-card-onload"]}
>
  {
    hasKeyword && (
      <h1
        slot="heading"
        class="animate-onload opacity-0"
        style={animated ? `animation-delay: ${interval};` : ""}
      >
        {keyword}
      </h1>
    )
  }

  <slot />
</Card>
