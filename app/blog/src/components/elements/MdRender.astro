---
interface Props {
  class?: string;
}
const props = Astro.props;
---

<div
  class:list={[
    "prose max-w-full break-words prose-gray dark:prose-invert",
    props.class,
  ]}
>
  <slot />
</div>
<script>
  const copyButtonLabel = "Copy";
  const codeBlocks = Array.from(document.querySelectorAll("pre"));

  for (const codeBlock of codeBlocks) {
    const wrapper = document.createElement("div");
    wrapper.style.position = "relative";

    const copyButton = document.createElement("button");
    copyButton.className = "copy-code";
    copyButton.innerHTML = copyButtonLabel;

    codeBlock.setAttribute("tabindex", "0");
    codeBlock.appendChild(copyButton);
    // wrap codeblock with relative parent element
    codeBlock.parentNode?.insertBefore(wrapper, codeBlock);
    wrapper.appendChild(codeBlock);

    copyButton.addEventListener("click", async () => {
      await copyCode(codeBlock, copyButton);
    });
  }

  async function copyCode(block: HTMLPreElement, button: HTMLButtonElement) {
    const code = block.querySelector("code");
    const text = code?.innerText || "";

    await navigator.clipboard.writeText(text);

    // visual feedback that task is completed
    button.innerText = "Copied";

    setTimeout(() => {
      button.innerText = copyButtonLabel;
    }, 700);
  }
</script>
